/*
 * @file inv_aes.c
 *
 */
/*
 * AES
 */
#include "../../header/aes/inv_aes.h"

/* Sbox Lookup Table */
// extern sbox include

/* Inverse Sbox Lookup Table */
const byte inv_sbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
    0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
    0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
    0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
    0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
    0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
    0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
    0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
    0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
    0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
    0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
    0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

byte ikey[11][16];

byte * inv_aes(byte *in, byte *skey)
{
	int i;

	for(i=0; i < 16; i++)
	{
		state[i] = in[i];
		ikey[0][i] = skey[i];
	}

	/*Generate Round Keys*/
	for(i = 0; i < 10; i++)
	{
		inv_computeKey(rcon[i], i+1);
	}

	inv_addRoundKey(10);
	inv_shiftRows();
	inv_subBytes();

	for(i = 0; i < 9; i++)
	{
		inv_addRoundKey(9-i);
		inv_mixColumns();
		inv_shiftRows();
		inv_subBytes();
	}

	inv_addRoundKey(0);

	return state;
}

void inv_addRoundKey(int i)
{
	int j;

	for(j=0; j < 16; j++)
	{
		state[j] ^= ikey[i][j];
	}
}

/* subBytes
 * Table Lookup
 */
void inv_subBytes(void)
{
	int i;

	for(i = 0; i < 16; i++)
	{
		state[i] = inv_sbox[ state[i] ];
	}
}

/* inv shiftRows              Before         After
 * Row 1: No change         0 4  8 12      0  4  8 12
 * Row 2: Right Shift by 1  1 5  9 13  => 13  1  5  9
 * Row 3: Right Shift by 2  2 6 10 14     10 14  2  6
 * Row 4: Right Shift by 3  3 7 11 15      7 11 15  3
 */
void inv_shiftRows(void)
{
	byte temp;

	//Row 2
	temp = state[1]; state[1] = state[13]; state[13] = state[9];
	state[9] = state[5]; state[5] = temp;
	//Row 3
	temp = state[10]; state[10] = state[2]; state[2] = temp;
	temp = state[14]; state[14] = state[6]; state[6] = temp;
	//Row 4
	temp = state[3]; state[3] = state[7]; state[7] = state[11];
	state[11] = state[15]; state[15] = temp;
}

/* MixColumns Shortcut
 * Vunerable to timing attack, must add nop
 */
byte inv_xtime(byte x)
{
	return (x & 0x80) ? ((x << 1) ^ 0x1b) : (x<<1);
}

/* Inverse Mix Column */
void inv_mixColumns(void)
{
	byte i, a, b, c, d, e, x, y, z;

	/* Process a column at a time */
	for(i = 0; i < 16; i+=4)
	{
		a = state[i]; b = state[i+1]; c = state[i+2]; d = state[i+3];
		e = a ^ b ^ c ^ d;
		//Inverses
		z = inv_xtime(e);
		x = e ^ inv_xtime(inv_xtime(z^a^c) );
		y = e ^ inv_xtime(inv_xtime(z^b^d) );
		state[i]   ^= x ^ inv_xtime(a^b);
		state[i+1] ^= y ^ inv_xtime(b^c);
		state[i+2] ^= x ^ inv_xtime(c^d);
		state[i+3] ^= y ^ inv_xtime(d^a);
	}
}
/* Compute a round of the key
 * 0 4  8 12
 * 1 5  9 13
 * 2 6 10 14
 * 3 7 11 15
 */
void inv_computeKey(byte rcon, int round)
{
    byte buf0, buf1, buf2, buf3;
    buf0 = sbox[ ikey[round-1][13] ];
    buf1 = sbox[ ikey[round-1][14] ];
    buf2 = sbox[ ikey[round-1][15] ];
    buf3 = sbox[ ikey[round-1][12] ];

    ikey[round][0] = ikey[round-1][0] ^ buf0 ^ rcon;
    ikey[round][1] = ikey[round-1][1] ^ buf1;
    ikey[round][2] = ikey[round-1][2] ^ buf2;
    ikey[round][3] = ikey[round-1][3] ^ buf3;

    ikey[round][4] = ikey[round-1][4] ^ ikey[round][0];
    ikey[round][5] = ikey[round-1][5] ^ ikey[round][1];
    ikey[round][6] = ikey[round-1][6] ^ ikey[round][2];
    ikey[round][7] = ikey[round-1][7] ^ ikey[round][3];

    ikey[round][8]  = ikey[round-1][8]  ^ ikey[round][4];
    ikey[round][9]  = ikey[round-1][9]  ^ ikey[round][5];
    ikey[round][10] = ikey[round-1][10] ^ ikey[round][6];
    ikey[round][11] = ikey[round-1][11] ^ ikey[round][7];

    ikey[round][12] = ikey[round-1][12] ^ ikey[round][8];
    ikey[round][13] = ikey[round-1][13] ^ ikey[round][9];
    ikey[round][14] = ikey[round-1][14] ^ ikey[round][10];
    ikey[round][15] = ikey[round-1][15] ^ ikey[round][11];
}


